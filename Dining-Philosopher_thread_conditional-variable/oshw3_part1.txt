1.
Memory Mapped I/O 是指I/O與memory共用記憶體空間，
不需要特別指令來處理I/O。
Memory mapped I/O是將I/O的port或memory mapping到記憶體位址上，
I/O map在某一塊memory當作I/O讀寫的那塊memory相當於in/out I/O。
其運用同一條address bus去做存取memory與IO，
而CPU用類似的指令就可以達成兩種目的，不須特別做位址上的轉換。
優點是可以把I/O存取直接當成存取記憶體來用，
缺點是有mapping到的區域原則上就不能放需要存取的資料。

2.
直接記憶體存取 (Direct Memory Access, DMA)，
是一種繞過CPU，讓硬體直接對記憶體進行存取資料的技術，
其運作核心是由DMA controller來控制。
DMA為一個特殊的硬體結構，它允許介面裝置與記憶體之間直接存取資料，
而不需經由CPU的參與。

當硬體需要傳輸大量資料時，發出DMA需求。
step1.CPU programs the DMA controller
	對DMA controller( 下達完CPU就不管，CPU回去做自己的工作，剩下交給DMA去做I/O )
step2.DMA requests transfer to memory
	對Disk read or write
step3.Data transferred
	到實體記憶體
step4.Ack
	告訴DMA controller
step5.Interrupt when done
	等完成資料傳輸後，DMA controller會對CPU發出中斷。
每當傳送一整個block資料，CPU只需中斷一次，
而非每bytes都要中斷，有效減少中斷的次數。

3.
(a)
	FCFS( First Come First Serve ) :
		+----------------+--+----+--+------------+
		|       P1       |P2| P3 |P4|     P5     |
		+----------------+--+----+--+------------+
	p1 :|////////////////|  |    |  |            |
		+----------------+--+----+--+------------+
	p2 :|                |//|    |  |            |
		+----------------+--+----+--+------------+
	p3 :|                |  |////|  |            |
		+----------------+--+----+--+------------+
	p4 :|                |  |    |//|            |
		+----------------+--+----+--+------------+
	p5 :|                |  |    |  |////////////|
		+----------------+--+----+--+------------+
		0                8  9   11 12           18
		
	SJF( Sortest Job First ) :
		+--+--+----+------------+----------------+
		|P2|P4| P3 |     P5     |       P1       |
		+--+--+----+------------+----------------+
	p1 :|  |  |    |            |////////////////|
		+--+--+----+------------+----------------+
	p2 :|//|  |    |            |                |
		+--+--+----+------------+----------------+
	p3 :|  |  |////|            |                |
		+--+--+----+------------+----------------+
	p4 :|  |//|    |            |                |
		+--+--+----+------------+----------------+
	p5 :|  |  |    |////////////|                |
		+--+--+----+------------+----------------+
		0  1  2    4           10               18

	Non-Preemptive priority :
		+--+------------+----+----------------+--+
		|P2|     P5     | P3 |       P1       |P4|
		+--+------------+----+----------------+--+
	p1 :|  |            |    |////////////////|  |
		+--+------------+----+----------------+--+
	p2 :|//|            |    |                |  |
		+--+------------+----+----------------+--+
	p3 :|  |            |////|                |  |
		+--+------------+----+----------------+--+
	p4 :|  |            |    |                |//|
		+--+------------+----+----------------+--+
	p5 :|  |////////////|    |                |  |
		+--+------------+----+----------------+--+
		0  1            7    9               17 18

	RR( Round Robin ) :
		+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
		|P1|P2|P3|P4|P5|P1|P3|P5|P1|P5|P1|P5|P1|P5|P1|P5|P1|P1|
		+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
	p1 :|//|  |  |  |  |//|  |  |//|  |//|  |//|  |//|  |//|//|
		+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
	p2 :|  |//|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |
		+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
	p3 :|  |  |//|  |  |  |//|  |  |  |  |  |  |  |  |  |  |  |
		+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
	p4 :|  |  |  |//|  |  |  |  |  |  |  |  |  |  |  |  |  |  |
		+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
	p5 :|  |  |  |  |//|  |  |//|  |//|  |//|  |//|  |//|  |  |
		+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
		0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18
		
(b)	
	turn around time : endtime - 0
	
          | FCFS | SJF | Priority |  RR  
    ------+------+-----+----------+------
      P1  |   8  |  18 |    17    |  18  
      P2  |   9  |   1 |     1    |   2 
      P3  |  11  |   4 |     9    |   7   
      P4  |  12  |   2 |    18    |   4
      P5  |  18  |  10 |     7    |  16 
      
(c)
	waiting time : turn around time - process time
	
          | FCFS | SJF | Priority |  RR  
    ------+------+-----+----------+------
      P1  |   0  |  10 |     9    |  10  
      P2  |   8  |   0 |     0    |   1 
      P3  |   9  |   2 |     7    |   5   
      P4  |  11  |   1 |    17    |   3
      P5  |  12  |   4 |     1    |  10
	------+------+-----+----------+------
	  Sum |  40  |  17 |    34    |  29
(d)
	SJF( Shortest Job First ) has the minimal waiting time over all process.

4.
yes, kernel part can act like subroutine and coroutine。

subroutine就像是我們一般寫程式的時候，執行到副程式的時候，
主程式會先暫停，跳到副程式執行，執行完後再跳回主程式，主程式再繼續執行；

coroutine比較像是thread，允許程式執行到一半先中斷，
中斷時內部狀態會被保留且紀錄下來，呼叫端可以隨時在之後恢復這個 coroutine。

當我們在user part呼叫system server的時候，就需要轉換到kernel part，
同時又分為 blocking kernel system call 跟 non-blocking system call，
例如與I/O相關的system call就可能是blocking，不能被中斷，
這時候我認為就比較像是subroutine的方式運作，
相反的，non-blocking就比較像是coroutine的方式運作。