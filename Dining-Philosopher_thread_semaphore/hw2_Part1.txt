1. 
可以，即使在多process執行的情況下，我們仍能藉由swap指令達到test&set lock的目的，因為register與memory中的值交換後，原暫存器的值並不會流失，且其為single indivisible action，在指令運作期間並不會被打斷。
Enter_region :
		move register, #1
		swap register, lock
		cmp register, #0
		jne enter_region
		ret
		
Leave_region :
		move lock, #0
		ret
		
2.
round-robin scheduling : 每quantum(Q)時間換一個process做，直到各個process執行時間(T)結束，而轉換process所消耗的時間為(S)。
CPU efficiency = useful CPU time / total CPU time
轉換process次數 = T/Q
轉換過程浪費的時間 = S*T/Q
cpu efficiency = T/(T+S*T/Q)

(a) Q = infinity, S = 0, efficiency = 100%
(b) Q > T, S = 0, efficiency = T/(T+0*T/Q) = 100%
(c) S < Q < T, efficiency = T/(T+S*T/Q) = (50%~100%), 根據接近程度改變
(d) Q = S, efficiency = T/(T+S*T/Q) = T/2T = 50%
(e) Q nearly 0, efficiency = T/(T+S*T/Q) = T/infinity = 趨近於0% 

3.
Receive( A, messageA )
Receive( B, messageB )
or
Receive( B, messageB )
Receive( A, messageA )

4.
由於每次fork()出父、子process皆會各自擁有一份各自複製的virtual memory，其中的global變數也各自獨立，而到第三次fork()時才執行pthread使value+1，即便不知道fork()後是父或子誰先執行，但可以確定的是，ABCD的值是確定的，也因為沒有waitpid的條件所以ABCD所印出的順序將會有4! = 24種。
A = 1
B = 1 
C = 2
D = 2
